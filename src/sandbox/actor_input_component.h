#pragma once
#include <string_view>

#include "actor_component.h"
#include "GLFW/glfw3.h"

enum EInputEvent : int
{
	IE_Pressed = 0,
	IE_Released = 1,
	IE_Repeat = 2,
	IE_DoubleClick = 3,
	IE_Axis = 4,
	IE_MAX = 5,
};
enum class EKeys
{
    K_Unknown = -1,
    K_SpaceBar = GLFW_KEY_SPACE,
    K_Apostrophe = GLFW_KEY_APOSTROPHE,
    K_Comma = GLFW_KEY_COMMA,
    K_Minus = GLFW_KEY_MINUS,
    K_Period = GLFW_KEY_PERIOD,
    K_Slash = GLFW_KEY_SLASH,
    K_0 = GLFW_KEY_0,
    K_1 = GLFW_KEY_1,
    K_2 = GLFW_KEY_2,
    K_3 = GLFW_KEY_3,
    K_4 = GLFW_KEY_4,
    K_5 = GLFW_KEY_5,
    K_6 = GLFW_KEY_6,
    K_7 = GLFW_KEY_7,
    K_8 = GLFW_KEY_8,
    K_9 = GLFW_KEY_9,
    K_Semicolon = GLFW_KEY_SEMICOLON,
    K_Equal = GLFW_KEY_EQUAL,
    K_A = GLFW_KEY_A,
    K_B = GLFW_KEY_B,
    K_C = GLFW_KEY_C,
    K_D = GLFW_KEY_D,
    K_E = GLFW_KEY_E,
    K_F = GLFW_KEY_F,
    K_G = GLFW_KEY_G,
    K_H = GLFW_KEY_H,
    K_I = GLFW_KEY_I,
    K_J = GLFW_KEY_J,
    K_K = GLFW_KEY_K,
    K_L = GLFW_KEY_L,
    K_M = GLFW_KEY_M,
    K_N = GLFW_KEY_N,
    K_O = GLFW_KEY_O,
    K_P = GLFW_KEY_P,
    K_Q = GLFW_KEY_Q,
    K_R = GLFW_KEY_R,
    K_S = GLFW_KEY_S,
    K_T = GLFW_KEY_T,
    K_U = GLFW_KEY_U,
    K_V = GLFW_KEY_V,
    K_W = GLFW_KEY_W,
    K_X = GLFW_KEY_X,
    K_Y = GLFW_KEY_Y,
    K_Z = GLFW_KEY_Z,
    K_LeftBracket = GLFW_KEY_LEFT_BRACKET,
    K_Backslash = GLFW_KEY_BACKSLASH,
    K_RightBracket = GLFW_KEY_RIGHT_BRACKET,
    K_GraveAccent = GLFW_KEY_GRAVE_ACCENT,
    K_World1 = GLFW_KEY_WORLD_1,
    K_World2 = GLFW_KEY_WORLD_2,
    K_Escape = GLFW_KEY_ESCAPE,
    K_Enter = GLFW_KEY_ENTER,
    K_Tab = GLFW_KEY_TAB,
    K_Backspace = GLFW_KEY_BACKSPACE,
    K_Insert = GLFW_KEY_INSERT,
    K_Delete = GLFW_KEY_DELETE,
    K_Right = GLFW_KEY_RIGHT,
    K_Left = GLFW_KEY_LEFT,
    K_Down = GLFW_KEY_DOWN,
    K_Up = GLFW_KEY_UP,
    K_PageUp = GLFW_KEY_PAGE_UP,
    K_PageDown = GLFW_KEY_PAGE_DOWN,
    K_Home = GLFW_KEY_HOME,
    K_End = GLFW_KEY_END,
    K_CapsLock = GLFW_KEY_CAPS_LOCK,
    K_ScrollLock = GLFW_KEY_SCROLL_LOCK,
    K_NumLock = GLFW_KEY_NUM_LOCK,
    K_PrintScreen = GLFW_KEY_PRINT_SCREEN,
    K_Pause = GLFW_KEY_PAUSE,
    K_F1 = GLFW_KEY_F1,
    K_F2 = GLFW_KEY_F2,
    K_F3 = GLFW_KEY_F3,
    K_F4 = GLFW_KEY_F4,
    K_F5 = GLFW_KEY_F5,
    K_F6 = GLFW_KEY_F6,
    K_F7 = GLFW_KEY_F7,
    K_F8 = GLFW_KEY_F8,
    K_F9 = GLFW_KEY_F9,
    K_F10 = GLFW_KEY_F10,
    K_F11 = GLFW_KEY_F11,
    K_F12 = GLFW_KEY_F12,
    K_F13 = GLFW_KEY_F13,
    K_F14 = GLFW_KEY_F14,
    K_F15 = GLFW_KEY_F15,
    K_F16 = GLFW_KEY_F16,
    K_F17 = GLFW_KEY_F17,
    K_F18 = GLFW_KEY_F18,
    K_F19 = GLFW_KEY_F19,
    K_F20 = GLFW_KEY_F20,
    K_F21 = GLFW_KEY_F21,
    K_F22 = GLFW_KEY_F22,
    K_F23 = GLFW_KEY_F23,
    K_F24 = GLFW_KEY_F24,
    K_F25 = GLFW_KEY_F25,
    K_KP_0 = GLFW_KEY_KP_0,
    K_KP_1 = GLFW_KEY_KP_1,
    K_KP_2 = GLFW_KEY_KP_2,
    K_KP_3 = GLFW_KEY_KP_3,
    K_KP_4 = GLFW_KEY_KP_4,
    K_KP_5 = GLFW_KEY_KP_5,
    K_KP_6 = GLFW_KEY_KP_6,
    K_KP_7 = GLFW_KEY_KP_7,
    K_KP_8 = GLFW_KEY_KP_8,
    K_KP_9 = GLFW_KEY_KP_9,
    K_KP_Decimal = GLFW_KEY_KP_DECIMAL,
    K_KP_Divide = GLFW_KEY_KP_DIVIDE,
    K_KP_Multiply = GLFW_KEY_KP_MULTIPLY,
    K_KP_Subtract = GLFW_KEY_KP_SUBTRACT,
    K_KP_Add = GLFW_KEY_KP_ADD,
    K_KP_Enter = GLFW_KEY_KP_ENTER,
    K_KP_Equal = GLFW_KEY_KP_EQUAL,
    K_LeftShift = GLFW_KEY_LEFT_SHIFT,
    K_LeftControl = GLFW_KEY_LEFT_CONTROL,
    K_LeftAlt = GLFW_KEY_LEFT_ALT,
    K_LeftSuper = GLFW_KEY_LEFT_SUPER,
    K_RightShift = GLFW_KEY_RIGHT_SHIFT,
    K_RightControl = GLFW_KEY_RIGHT_CONTROL,
    K_RightAlt = GLFW_KEY_RIGHT_ALT,
    K_RightSuper = GLFW_KEY_RIGHT_SUPER,
    K_Menu = GLFW_KEY_MENU
};


class InputComponent :
    public ActorComponent
{
	template<typename ResponseMethod>
	void BindAction(std::string_view ActionName, const EInputEvent KeyEvent, Actor* ActorObject, ResponseMethod Func)
	{
	}

	template<typename ResponseMethod>
	void BindAction(std::string_view ActionName, Actor* ActorObject, ResponseMethod Func)
	{
	}
};

